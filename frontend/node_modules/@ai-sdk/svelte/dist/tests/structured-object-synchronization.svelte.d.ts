import { StructuredObject } from '../structured-object.svelte.js';
import type { Schema } from '@ai-sdk/ui-utils';
import type { z } from 'zod';
declare class __sveltets_Render<RESULT> {
    props(): {
        id?: string;
        api: string;
        schema: z.ZodType<RESULT, z.ZodTypeDef, unknown> | Schema<RESULT>;
    };
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {
        object1: StructuredObject<RESULT, unknown>;
        object2: StructuredObject<RESULT, unknown>;
    };
}
interface $$IsomorphicComponent {
    new <RESULT>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<RESULT>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<RESULT>['props']>, ReturnType<__sveltets_Render<RESULT>['events']>, ReturnType<__sveltets_Render<RESULT>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<RESULT>['bindings']>;
    } & ReturnType<__sveltets_Render<RESULT>['exports']>;
    <RESULT>(internal: unknown, props: ReturnType<__sveltets_Render<RESULT>['props']> & {}): ReturnType<__sveltets_Render<RESULT>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const StructuredObjectSynchronization: $$IsomorphicComponent;
type StructuredObjectSynchronization<RESULT> = InstanceType<typeof StructuredObjectSynchronization<RESULT>>;
export default StructuredObjectSynchronization;
//# sourceMappingURL=structured-object-synchronization.svelte.d.ts.map